<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="author" content="Marios Yiannakou">
  <meta name="description" content="RaspberryPi Weather based Spotify Web-Player">
  <title>mario~ RaSpotify</title>

  <!-- ***** STYLESHEETS ***** -->
  <!-- FontAwsome CDN -->
  <link rel="stylesheet" href="static/fontawesome/css/all.css">
  <link rel="stylesheet" href="static/fontawesome/css/fontawesome.css">
  <!-- BootStrap CDN -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
  <!-- Custom CSS Styles -->
  <link rel="stylesheet" href="static/css/styles.css">
</head>

<body>
  <!-- Spotify Web Player -->
  <table id="spotify-web-player" class="table table-dark table-striped">
    <thead>
      <tr>
        <th colspan="3">
          <% if (username) { %>
            <h1 class="spotify-player-header"><i class="fab fa-spotify"></i> Spotify Web-Player (<%= username %>) </h1>
          <% } else { %>
            <h1 class="spotify-player-header"><i class="fab fa-spotify"></i> Spotify Web-Player</h1>
          <% } %>
        </th>
      </tr>
      <tr>
        <th class="spotify-player-col">Previous Track:</th>
        <th class="spotify-player-col">Currently Playing:</th>
        <th class="spotify-player-col">Upcoming Track:</th>
      </tr>
    </thead>
    <tbody>
      <!-- Thumbnails Row -->
      <tr>
        <td class="align-bottom"><img class="track-thumbnail" id="previous-track-thumb" alt="previous-track"></td>
        <td class="align-bottom"><img class="current-track-thumbnail" id="current-track-thumb" alt="current-track" src="<%= current_track_image %>"></td>
        <td class="align-bottom"><img class="track-thumbnail" id="upcoming-track-thumb" alt="upcoming-track"></td>
      </tr>
      <!-- Track Information Row -->
      <tr>
        <td class="spotify-information" id="previousTrack">Previous track name</td>
        <td class="spotify-information" id="currentTrack"><%= current_track_name %></td>
        <td class="spotify-information" id="upcomingTrack">Upcoming track name</td>
      </tr>
      <tr>
        <td class="spotify-information" id="previousTrackArtists">Previous track artists</td>
        <td class="spotify-information" id="currentTrackArtists"><%= current_track_artists %></td>
        <td class="spotify-information" id="upcomingTrackArtists">Upcoming track artists</td>
      </tr>
      <!-- Playback Controls -->
      <tr>
        <td>
        </td>
        <td>
          <form class="spotify-media-btn" action="/spotify_previous" method="GET">
            <button type="submit" class="btn btn-lg btn-success">
              <i class="fas fa-step-backward"></i>
            </button>
          </form>
          <form class="spotify-media-btn" action="/spotify_play_pause" method="GET">
            <button type="submit" class="btn btn-lg btn-success">
              <i class="fas fa-play-circle"></i> / <i class="fas fa-pause-circle"></i>
            </button>
          </form>
          <form class="spotify-media-btn" action="/spotify_next" method="GET">
            <button type="submit" class="btn btn-lg btn-success">
              <i class="fas fa-step-forward"></i>
            </button>
          </form>
        </td>
        <td></td>
      </tr>
    </tbody>
  </table>

  <!-- SenseHAT Temperature and Humidity Readings -->
  <table class="table table-striped table-dark">
    <thead>
      <tr>
        <h1 style="color: #008a26; text-align: center; padding: 10px; margin: 0px; background-color: #111113;">Temperature and Humidity Data - Refreshes every X seconds</h1>
      </tr>
      <tr>
        <th style="font-weight: bold;">Time</th>
        <th style="font-weight: bold;">Temperature</th>
        <th style="font-weight: bold;">Humidity</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td id="time"></td>
        <td id="temp"></td>
        <td id="humidity"></td>
      </tr>
    </tbody>
  </table>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
  <!-- Refresh Page/Data -- STOPS SPOTIFY WEBPLAYER -->
  <!-- <script src="./web/js/refreshPage.js"></script> -->
  <script>
    window.onSpotifyWebPlaybackSDKReady = () => {
      const token = 'BQDu8wCCOrVnv9gLe-HSxc1eyLugL9UQ9GvSUZuJrx1uCHm2FepoWH_Upd7YjnYYuzivHBr1F_hk8E2e-v2fb3exbCc5q_3Yganv5au2FbhwJCDiO8wMPlWFObohCVV_joc_FxvuI9_Re5jMJVK3Am2Yi9GrrD8YnPppH7DwmX2C5_9GqjjFWTA';
      const player = new Spotify.Player({
        name: 'Web Playback SDK Quick Start Player',
        getOAuthToken: cb => { cb(token); }
    });

    // Error handling
    player.addListener('initialization_error', ({ message }) => {
      console.error("Initialisation error: ", message); }
    );
    player.addListener('authentication_error', ({ message }) => {
      console.error("Authentication error: ", message); }
    );
    player.addListener('account_error', ({ message }) => {
      console.error("Account error: ", message); }
    );
    player.addListener('playback_error', ({ message }) => {
      console.error("Playback error: ", message); }
    );

    /*
      * Playback status updates
      * Contains data about currently / upcoming tracks
      */
    player.addListener('player_state_changed', state => {
      console.log("State change --> ", state);
      
      // Previous track
      if (state.track_window.previous_tracks.length > 1) {
        document.getElementById("previousTrack").innerHTML = state.track_window.previous_tracks[1].name;
        document.getElementById("previous-track-thumb").src = state.track_window.previous_tracks[1].album.images[2].url;
        var artists = [];
        state.track_window.previous_tracks[1].artists.forEach(artist => {
          artists.push(artist.name);
        });
        document.getElementById("previousTrackArtists").innerHTML = artists;
      } else if (state.track_window.previous_tracks.length === 1) {
        document.getElementById("previousTrack").innerHTML = state.track_window.previous_tracks[0].name;
        document.getElementById("previous-track-thumb").src = state.track_window.previous_tracks[0].album.images[2].url;
        var artists = [];
        state.track_window.previous_tracks[0].artists.forEach(artist => {
          artists.push(artist.name);
        });
        document.getElementById("previousTrackArtists").innerHTML = artists;
      } else {
        document.getElementById("previousTrack").innerHTML = 'N/A';
        document.getElementById("previous-track-thumb").src = '#';
        document.getElementById("previousTrackArtists").innerHTML = 'N/A';
      }

      // Current track
      document.getElementById("currentTrack").innerHTML = state.track_window.current_track.name;
      document.getElementById("current-track-thumb").src = state.track_window.current_track.album.images[2].url;
      artists = [];
      state.track_window.current_track.artists.forEach(artist => {
        artists.push(artist.name);
      });
      document.getElementById("currentTrackArtists").innerHTML = artists;

      // Upcoming track
      if (state.track_window.next_tracks.length > 0) {
        document.getElementById("upcomingTrack").innerHTML = state.track_window.next_tracks[0].name;
        document.getElementById("upcoming-track-thumb").src = state.track_window.next_tracks[0].album.images[2].url;
        artists = [];
        state.track_window.next_tracks[0].artists.forEach(artist => {
          artists.push(artist.name);
        });
        document.getElementById("upcomingTrackArtists").innerHTML = artists;
      } else {
        document.getElementById("upcomingTrack").innerHTML = 'N/A';
        document.getElementById("upcoming-track-thumb").src = '#';
        document.getElementById("upcomingTrackArtists").innerHTML = 'N/A';
      }
    });

    // Ready
    player.addListener('ready', ({ device_id }) => {
      console.log('Ready with Device ID', device_id);
    });

    // Not Ready
    player.addListener('not_ready', ({ device_id }) => {
      console.log('Device ID has gone offline', device_id);
    });

    // Connect to the player!
    player.connect();
    };
  </script>
</body>
</html>